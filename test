#!/usr/bin/env bash
# test.sh - Smart Pandoc Debugger Test Suite
#
# Focused test suite for the Smart Pandoc Debugger project.
#
# Usage: ./test           # Run all tests
#        ./test 1        # Run test 1 (Missing Dollar Sign)
#        ./test 3 4      # Run tests 3 and 4
#        DEBUG=1 ./test   # Run with debug output

# Determine SCRIPT_DIR and PROJECT_ROOT relative to this test.sh script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="${SCRIPT_DIR}" # Assuming test.sh is at the project root

# Path to the main SDE entry point
SDE_EXECUTABLE="smart-pandoc-debugger"  # Assumes it's in the system PATH

# --- Helper Functions ---

die() {
    echo -e "\033[0;31mERROR: $1\033[0m" >&2
    exit 1
}

run_sde() {
    local input_md="$1"
    printf '%s' "${input_md}" | "${SDE_EXECUTABLE}" 2>&1
}

# --- Test Runner ---

run_test() {
    local test_num="$1"
    local test_name=""
    local input_md=""
    local expected_outcome=""
    
    case "$test_num" in
        1)
            test_name="Missing Dollar Sign"
            input_md="# Test\n\nf(x) = 2x + 3"
            expected_outcome="Missing math delimiters"
            ;;
        2)
            test_name="Undefined Command"
            input_md="# Test\n\n\$\\\\nonexistentcommand\$"
            expected_outcome="Undefined control sequence"
            ;;
        3)
            test_name="Mismatched Delimiters"
            input_md="# Test\n\n\$\$ \\left( \\frac{a}{b} \\right] \$\$"
            expected_outcome="Mismatched delimiters"
            ;;
        4)
            test_name="Align Environment"
            input_md="# Align Test\n\n\\\\begin{align*}\na &= b + c \\\\d &= e + f\n\\\\end{align*}"
            expected_outcome="CompilationSuccess_PDFShouldBeValid"
            ;;
        5)
            test_name="Unbalanced Braces"
            input_md="# Test\n\n\$f(x) = \\frac{1}{1 + e^{-x}\$"
            expected_outcome="Unbalanced braces"
            ;;
        *)
            die "Invalid test number: $test_num (must be 1-5)"
            ;;
    esac
    
    echo -e "\n=== TEST ${test_num}: ${test_name} ==="
    echo -e "Input Markdown:\n${input_md}"
    echo -e "--------------------------------------------------"
    
    local output
    output=$(run_sde "${input_md}")
    local status=$?
    
    if [[ "${DEBUG:-0}" == "1" ]]; then
        echo -e "SDE Output (exit status: ${status}):"
        echo "${output}" | sed 's/^/  /'
    fi
    
    if echo "${output}" | grep -q "${expected_outcome}"; then
        echo -e "‚úÖ TEST ${test_num} PASSED: Found '${expected_outcome}'"
        return 0
    else
        echo -e "‚ùå TEST ${test_num} FAILED: Expected '${expected_outcome}' not found"
        return 1
    fi
}

# --- Main ---

main() {
    # Check if SDE is available
    if ! command -v "${SDE_EXECUTABLE}" >/dev/null 2>&1; then
        die "${SDE_EXECUTABLE} not found in PATH"
    fi
    
    echo -e "üöÄ Smart Pandoc Debugger Test Suite"
    echo -e "SDE: $(which ${SDE_EXECUTABLE})"
    echo -e "DEBUG: ${DEBUG:-0}"
    echo -e "======================================"
    
    local tests_to_run=()
    local all_passed=0
    
    # If no args, run all tests
    if [[ $# -eq 0 ]]; then
        tests_to_run=(1 2 3 4 5)
    else
        tests_to_run=("$@")
    fi
    
    for test_num in "${tests_to_run[@]}"; do
        if ! run_test "$test_num"; then
            all_passed=1
        fi
    done
    
    echo -e "\n=== SUMMARY ==="
    if [[ $all_passed -eq 0 ]]; then
        echo -e "‚úÖ ALL TESTS PASSED"
    else
        echo -e "‚ùå SOME TESTS FAILED"
    fi
    
    return $all_passed
}

# Run main with all arguments
main "$@"
