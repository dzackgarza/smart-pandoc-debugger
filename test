#!/usr/bin/env bash
# test - SDE V5.2.0 Test Suite
#
# Main test suite for the Smart Pandoc Debugger project.
#
# Usage: ./test           # Run all tests
#        ./test 1 3      # Run tests 1 and 3
#        DEBUG=1 ./test   # Run with debug output from SDE

# --- CONFIGURATION ---
SDE_EXECUTABLE="smart-pandoc-debugger"
# Set to 1 to stop after the first failed test
FAIL_FAST=${FAIL_FAST:-0}

# --- REGRESSION WARNING ---
echo -e "\033[1;33m"
echo "========================================================================"
echo "HACKATHON RULE: ANY CHANGE THAT CAUSES A REGRESSION (a passing test"
echo "to fail) MUST BE IMMEDIATELY REVERTED. DO NOT COMMIT REGRESSIONS."
echo "========================================================================"
echo -e "\033[0m"
sleep 1

# --- Test Runner ---
run_test() {
    local test_num="$1"
    local test_name=""
    local input_md=""
    local expected_outcome=""
    
    # Test definitions based on FAST-TODO.md
    case "$test_num" in
        1) test_name="Missing Dollar Sign"
           input_md="# Test\n\nf(x) = 2x + 3"
           expected_outcome="Missing math delimiters" ;;
        2) test_name="Undefined Command"
           input_md="# Test\n\n\$\\\\nonexistentcommand\$"
           expected_outcome="Undefined control sequence" ;;
        3) test_name="Mismatched Delimiters"
           input_md="# Test\n\n\$\$ \\left( \\frac{a}{b} \\right] \$\$"
           expected_outcome="Mismatched delimiters" ;;
        4) test_name="Align Environment (Compiles OK)"
           input_md="# Align Test\n\n\\begin{align*}\na &= b + c \\\\\nd &= e + f\n\\end{align*}"
           expected_outcome="CompilationSuccess_PDFShouldBeValid" ;;
        5) test_name="Unbalanced Braces"
           input_md="# Test\n\n\$f(x) = \\frac{1}{1 + e^{-x}}\$"
           expected_outcome="Unbalanced braces" ;;
        *) echo "ERROR: Invalid test number: $test_num" >&2; return 2 ;;
    esac
    
    echo -e "\n=== TEST ${test_num}: ${test_name} ==="
    echo -e "Input Markdown:\n${input_md}"
    echo -e "--------------------------------------------------"
    
    local output
    output=$(printf '%s' "${input_md}" | "${SDE_EXECUTABLE}" 2>&1)
    
    if [[ "${DEBUG:-0}" == "1" ]]; then
        echo -e "SDE Output (Full):"
        echo "${output}" | sed 's/^/  /'
    fi
    
    if echo "${output}" | grep -q "${expected_outcome}"; then
        echo -e "✅ TEST ${test_num} PASSED: Found '${expected_outcome}'"
        return 0
    else
        echo -e "❌ TEST ${test_num} FAILED: Expected '${expected_outcome}' not found in output:"
        echo "${output}" | head -n 20 | sed 's/^/  /'
        return 1
    fi
}

# --- Main Logic ---
main() {
    if ! command -v "${SDE_EXECUTABLE}" >/dev/null 2>&1; then
        echo -e "\033[0;31mERROR: SDE executable '${SDE_EXECUTABLE}' not found in PATH.\033[0m" >&2
        exit 1
    fi
    
    local tests_to_run=()
    local failed_tests=()
    
    if [[ $# -eq 0 ]]; then
        tests_to_run=(1 2 3 4 5)
    else
        tests_to_run=("$@")
    fi
    
    for test_num in "${tests_to_run[@]}"; do
        if ! run_test "$test_num"; then
            failed_tests+=("$test_num")
            if [[ "$FAIL_FAST" -eq 1 ]]; then
                break
            fi
        fi
    done
    
    echo -e "\n\n=== SUMMARY ==="
    if [[ ${#failed_tests[@]} -eq 0 ]]; then
        echo -e "\033[0;32m✅ ALL TESTS PASSED\033[0m"
        return 0
    else
        echo -e "\033[0;31m❌ FAILED TESTS: ${failed_tests[*]}\033[0m"
        return 1
    fi
}

main "$@" 
