#!/usr/bin/env python3
# compiler.py - V1.0 (Minimal Service Stub)
# Purpose: Simulates attempting TeX compilation to produce a compilation log.
#          Part of the SDE toolchain.
#
# CLI Contract (when called by Coordinator):
#   python3 compiler.py --json-in --json-out
#   Input (stdin with --json-in): 
#     { "case_id": "string", "tex_content": "string" }
#   Output (stdout with --json-out): 
#     { 
#       "case_id": "string",
#       "compilation_output": {
#         "log_content": "string_simulated_latex_log",
#         "compilation_outcome": "LATEX_COMPILATION_LOG_OBTAINED" // Indicates log is available
#       }
#     }
#
# Philosophy: Crashes on unexpected internal errors or bad input JSON structure.

import sys
import json
import os

# Assumes logger_utils.py is importable via manager_utils package
try:
    from manager_utils.logger_utils import logger
except ImportError:
    # Minimal fallback if run standalone during early dev and utils not in path
    class LoggerPlaceholder:
        def debug(self, msg, manager_name=None): 
            if os.environ.get("DEBUG","false").lower() == "true": 
                print(f"DEBUG (CompilerStubLog): {msg}", file=sys.stderr)
    logger = LoggerPlaceholder()
    logger.debug("Using placeholder logger in compiler.py stub.")


def generate_stub_latex_log(case_id: str, tex_content_preview: str) -> str:
    """Generates a simple, fake LaTeX log indicating common errors."""
    return (
        f"This is pdfTeX, Version 3.14159265-2.6-1.40.20 (TeX Live X)\n"
        f"kpathsea: Running mktexfmt pdflatex.fmt\n"
        f"Transcript written on texput.log.\n"
        f"Case ID: {case_id}\n"
        f"Processing TeX starting with: {tex_content_preview}...\n"
        f"(./input.tex\n" # Placeholder filename
        f"LaTeX2e <2023-01-01> patch level 0\n"
        f"(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls)\n"
        f"! Undefined control sequence.\n"
        f"l.5 \\myNonExistentCommand\n"
        f"                       This is where your error is (stub).\n"
        f"? \n"
        f"! LaTeX Error: Missing \\begin{{document}}.\n\n"
        f"See the LaTeX manual or LaTeX Companion for explanation.\n"
        f"Type  H <return>  for immediate help.\n"
        f" ...                                              \n\n"
        f"Output written on input.pdf (0 pages).\n" # Simulate it thought it made something
        f"Transcript written on input.log."
    )

if __name__ == "__main__":
    logger.debug("Compiler service stub started.", manager_name="CompilerStub")

    # Contract: Expects --json-in and --json-out if called by Coordinator.
    # For simplicity, this stub assumes those flags are present if stdin has data.
    # A more robust CLI would use argparse.
    
    input_json_str = sys.stdin.read()
    # json.loads will crash on empty or invalid JSON (caller/setup error for this service).
    input_payload = json.loads(input_json_str)
    
    # Assert required input keys (contract with Coordinator). Crash if missing.
    assert "case_id" in input_payload, "CompilerStub: 'case_id' missing in input JSON."
    assert "tex_content" in input_payload, "CompilerStub: 'tex_content' missing in input JSON."

    case_id = input_payload["case_id"]
    tex_content = input_payload["tex_content"]
    
    logger.debug(f"Processing case_id: {case_id}, TeX preview: {tex_content[:70]}...", manager_name="CompilerStub")

    # Simulate log generation
    log = generate_stub_latex_log(case_id, tex_content[:50])

    response = {
        "case_id": case_id,
        "compilation_output": {
            "log_content": log,
            # This status means the service ATTEMPTED compilation and a log IS available.
            # The log content itself indicates if the *user's document* had LaTeX errors.
            "compilation_outcome": "LATEX_COMPILATION_LOG_OBTAINED"
            # "pdf_content_base64": None, # Not providing PDF in this error-focused stub
        }
    }
    
    # Contract: Always output JSON to stdout.
    print(json.dumps(response))
    logger.debug("Compiler service stub finished successfully.", manager_name="CompilerStub")
    sys.exit(0) # Service itself completed its task (providing a log).
